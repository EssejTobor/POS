from dataclasses import dataclass, field
from datetime import datetime
from enum import Enum
from typing import List, Dict

class ItemType(Enum):
    """Defines the different types of work items that can be tracked"""
    TASK = "t"      # Regular tasks - day-to-day work items
    LEARNING = "l"  # Learning-related items - educational goals
    RESEARCH = "r"  # Research-related items - investigation tasks

class ItemStatus(Enum):
    """Defines the possible states of a work item"""
    NOT_STARTED = "not_started"   # New items start here
    IN_PROGRESS = "in_progress"   # Items currently being worked on
    COMPLETED = "completed"       # Finished items

class Priority(Enum):
    """Defines priority levels for work items"""
    LOW = 1    # Low urgency/importance
    MED = 2    # Medium urgency/importance
    HI = 3     # High urgency/importance - critical items

@dataclass
class WorkItem:
    """
    Core data structure representing a single work item.
    Uses @dataclass for automatic generation of __init__, __repr__, etc.
    
    Attributes:
        title: Short description of the item
        item_type: Category of the work item (TASK/LEARNING/RESEARCH)
        description: Detailed description of the work item
        goal: The broader goal this item belongs to
        priority: Importance level (LOW/MED/HI)
        status: Current state (NOT_STARTED/IN_PROGRESS/COMPLETED)
        id: Unique identifier (generated by WorkSystem)
        created_at: Timestamp of creation
        updated_at: Timestamp of last modification
    """
    title: str
    item_type: ItemType
    description: str
    goal: str
    priority: Priority = Priority.MED
    status: ItemStatus = ItemStatus.NOT_STARTED
    id: str = field(default="")  # Will be set by WorkSystem
    created_at: datetime = field(default_factory=datetime.now)
    updated_at: datetime = field(default_factory=datetime.now)
    
    def update_status(self, new_status: ItemStatus):
        self.status = new_status
        self.updated_at = datetime.now()

    def update_priority(self, new_priority: Priority):
        self.priority = new_priority
        self.updated_at = datetime.now()

    def to_dict(self) -> dict:
        return {
            'id': self.id,
            'title': self.title,
            'goal': self.goal,
            'item_type': self.item_type.value,
            'description': self.description,
            'priority': self.priority.value,
            'status': self.status.value,
            'created_at': self.created_at.isoformat(),
            'updated_at': self.updated_at.isoformat()
        } 