from datetime import datetime
from enum import Enum
from typing import List, Optional
from pydantic import BaseModel, Field

class ItemType(Enum):
    """Defines the different types of work items that can be tracked"""
    DO = "do"           # Regular tasks - day-to-day work items (formerly TASK)
    LEARN = "learn"     # Learning-related items - educational goals (formerly LEARNING)
    RESEARCH = "research"  # Research-related items - investigation tasks
    THINK = "think"     # Thought items - for tracking thought evolution

class ItemStatus(Enum):
    """Defines the possible states of a work item"""
    NOT_STARTED = "not_started"   # New items start here
    IN_PROGRESS = "in_progress"   # Items currently being worked on
    COMPLETED = "completed"       # Finished items

class Priority(Enum):
    """Defines priority levels for work items"""
    LOW = 1    # Low urgency/importance
    MED = 2    # Medium urgency/importance
    HI = 3     # High urgency/importance - critical items

class ThoughtStatus(Enum):
    """Defines the possible states of a thought node"""
    DRAFT = "draft"         # Initial capture of a thought
    EVOLVING = "evolving"   # Under active development
    CRYSTALLIZED = "crystallized"  # Settled/established thinking

class BranchType(Enum):
    """Defines the type of branch a thought represents"""
    EXPLORATION = "exploration"  # Exploring a new direction
    REFINEMENT = "refinement"    # Refining an existing thought
    CHALLENGE = "challenge"      # Challenging/questioning a thought

class WorkItem(BaseModel):
    """
    Core data structure representing a single work item.
    Uses Pydantic for validation and serialization.
    
    Attributes:
        title: Short description of the item
        item_type: Category of the work item (DO/LEARN/RESEARCH/THINK)
        description: Detailed description of the work item
        goal: The broader goal this item belongs to
        priority: Importance level (LOW/MED/HI)
        status: Current state (NOT_STARTED/IN_PROGRESS/COMPLETED)
        id: Unique identifier (generated by WorkSystem)
        created_at: Timestamp of creation
        updated_at: Timestamp of last modification
    """
    id: str = Field(default="")
    title: str
    goal: str
    item_type: ItemType
    description: str
    priority: Priority = Priority.MED
    status: ItemStatus = ItemStatus.NOT_STARTED
    created_at: datetime = Field(default_factory=datetime.now)
    updated_at: datetime = Field(default_factory=datetime.now)
    
    def update_status(self, new_status: ItemStatus):
        self.status = new_status
        self.updated_at = datetime.now()

    def update_priority(self, new_priority: Priority):
        self.priority = new_priority
        self.updated_at = datetime.now()

    def to_dict(self) -> dict:
        return {
            'id': self.id,
            'title': self.title,
            'goal': self.goal,
            'item_type': self.item_type.value,
            'description': self.description,
            'priority': self.priority.value,
            'status': self.status.value,
            'created_at': self.created_at.isoformat(),
            'updated_at': self.updated_at.isoformat()
        }

    @classmethod
    def from_dict(cls, data: dict) -> 'WorkItem':
        return cls(
            id=data['id'],
            title=data['title'],
            goal=data.get('goal', 'legacy'),
            item_type=ItemType(data['item_type']),
            description=data['description'],
            priority=Priority(data['priority']),
            status=ItemStatus(data['status']),
            created_at=datetime.fromisoformat(data['created_at']),
            updated_at=datetime.fromisoformat(data['updated_at'])
        )

class ThoughtNode(BaseModel):
    """
    Core data structure representing a thought node with branching capability.
    
    Attributes:
        id: Unique identifier 
        title: Short descriptive title
        content: Main thought content
        branch_name: Name of this thought branch
        is_external: Flag indicating if this thought came from external source
        parent_id: Reference to parent thought (if any)
        status: Current thought status
        tags: List of categorization tags
        branch_type: Type of branch this represents
        created_at: Timestamp of creation
        updated_at: Timestamp of last modification
    """
    id: str = Field(default="")
    title: str
    content: str
    branch_name: str
    is_external: bool = False
    parent_id: Optional[str] = None
    status: ThoughtStatus = ThoughtStatus.DRAFT
    tags: List[str] = Field(default_factory=list)
    branch_type: BranchType = BranchType.EXPLORATION
    created_at: datetime = Field(default_factory=datetime.now)
    updated_at: datetime = Field(default_factory=datetime.now)
    
    def evolve(self, new_content: str):
        """Update content and mark as evolving"""
        self.content = new_content
        self.status = ThoughtStatus.EVOLVING
        self.updated_at = datetime.now()
    
    def crystallize(self):
        """Mark thought as crystallized (finalized)"""
        self.status = ThoughtStatus.CRYSTALLIZED
        self.updated_at = datetime.now()
    
    def add_tag(self, tag: str):
        """Add a tag if it doesn't exist"""
        if tag.lower() not in [t.lower() for t in self.tags]:
            self.tags.append(tag)
            self.updated_at = datetime.now()
    
    def remove_tag(self, tag: str):
        """Remove a tag (case-insensitive)"""
        for existing_tag in self.tags:
            if existing_tag.lower() == tag.lower():
                self.tags.remove(existing_tag)
                self.updated_at = datetime.now()
                break
    
    def to_dict(self) -> dict:
        """Convert to dictionary for storage"""
        return {
            'id': self.id,
            'title': self.title,
            'content': self.content,
            'branch_name': self.branch_name,
            'is_external': int(self.is_external),
            'parent_id': self.parent_id,
            'status': self.status.value,
            'tags': ','.join(self.tags) if self.tags else '',
            'branch_type': self.branch_type.value,
            'created_at': self.created_at.isoformat(),
            'updated_at': self.updated_at.isoformat()
        }
    
    @classmethod
    def from_dict(cls, data: dict) -> 'ThoughtNode':
        """Create from dictionary"""
        return cls(
            id=data['id'],
            title=data['title'],
            content=data['content'],
            branch_name=data['branch_name'],
            is_external=bool(data['is_external']),
            parent_id=data['parent_id'],
            status=ThoughtStatus(data['status']),
            tags=data['tags'].split(',') if data['tags'] else [],
            branch_type=BranchType(data['branch_type']),
            created_at=datetime.fromisoformat(data['created_at']),
            updated_at=datetime.fromisoformat(data['updated_at'])
        ) 